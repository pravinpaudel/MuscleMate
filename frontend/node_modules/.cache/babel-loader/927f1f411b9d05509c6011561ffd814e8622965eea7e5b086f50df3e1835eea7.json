{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useAuthContext } from \"./useAuthContext\";\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const signup = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('/api/user/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const json = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(json.message);\n    }\n    if (response.ok) {\n      // Save the user to local storage\n      localStorage.setItem('user', JSON.stringify(json)); // to store string in local storage that's why stringify\n\n      // Update auth context\n      dispatch({\n        type: \"LOGIN\",\n        paylaod: json\n      });\n      setIsLoading(false);\n    }\n  };\n  return {\n    signup,\n    error,\n    isLoading\n  };\n};\n_s(useSignup, \"2o2oUdrJP220M1JG8l7hQABh7Ks=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","useSignup","_s","error","setError","isLoading","setIsLoading","dispatch","signup","email","password","response","fetch","method","headers","body","JSON","stringify","json","ok","message","localStorage","setItem","type","paylaod"],"sources":["/Users/pravinpaudel/Documents/MERN/Projects/MuscleMate/frontend/src/hooks/useSignup.js"],"sourcesContent":["import { useState } from \"react\"\nimport { useAuthContext } from \"./useAuthContext\"\n\nexport const useSignup = () => {\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(null)\n    const { dispatch } = useAuthContext()\n\n    const signup = async (email, password) => {\n        setIsLoading(true)\n        setError(null)\n\n        const response = await fetch('/api/user/signup', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email, password })\n        })\n\n        const json = await response.json()\n\n        if(!response.ok) {\n            setIsLoading(false)\n            setError(json.message)\n        }\n\n        if(response.ok) {\n            // Save the user to local storage\n            localStorage.setItem('user', JSON.stringify(json)) // to store string in local storage that's why stringify\n\n            // Update auth context\n            dispatch({type: \"LOGIN\", paylaod: json})\n\n            setIsLoading(false)\n        }\n    }\n    return { signup, error, isLoading } \n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC;EAErC,MAAMQ,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACtCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAG,CAACP,QAAQ,CAACQ,EAAE,EAAE;MACbb,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACc,IAAI,CAACE,OAAO,CAAC;IAC1B;IAEA,IAAGT,QAAQ,CAACQ,EAAE,EAAE;MACZ;MACAE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,EAAC;;MAEnD;MACAX,QAAQ,CAAC;QAACgB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEN;MAAI,CAAC,CAAC;MAExCZ,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EACD,OAAO;IAAEE,MAAM;IAAEL,KAAK;IAAEE;EAAU,CAAC;AACvC,CAAC;AAAAH,EAAA,CAjCYD,SAAS;EAAA,QAGGD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}